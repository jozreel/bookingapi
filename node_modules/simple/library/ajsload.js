"use strict";
var cfg = require('../../../config/systemconfig');
var pt = require('path');
var cacher = require('./cache');
let viewCache = require('../viewcache');
var ajsloadable = module.exports = function () {
	this.viewpth = cfg.viewpath;
	this.html = "";
	this.acceptEncoding = '';
}

ajsloadable.prototype.compression = function (req) {



	var acceptEncoding = req.headers['accept-encoding'];

	if (!acceptEncoding) {
		acceptEncoding = '';
		this.compress = false;
	}
	else {

		this.compress = true;
		if (req.headers['user-agent'].match(/trident/i) || req.headers['user-agent'].match(/edge/i)) {
			this.acceptEncoding = 'gzip';


		}
		else
			this.acceptEncoding = acceptEncoding;

	}

}
ajsloadable.prototype.checkFileLastMod = function (nm, mtime) {

	if (viewCache[nm] === undefined || mtime.getTime() > viewCache[nm].mtime) {
		return true;
	}
	return false;

}

ajsloadable.prototype.view = function (view, args, resp, req, cache, replacespecial, customui) {
	
	this.compression(req);
	this.cache = new cacher(req, resp);
	var fs = require('fs');
	var obj = this;
	var path = req.viewpath(view);
	
	if (path !== '' && fs.existsSync(path)) {

       

		var re = new RegExp('[\/\.]', 'g');

		let nm = path.replace(re, '');
		
		var stats = fs.statSync(path);
		let mtime = stats.mtime;
		var update = this.checkFileLastMod(nm,mtime);
		if (!update) {
			
			let data = viewCache[nm].data;
			
			var vals = args;
			var dt = data.toString();
            
			var shtml = require('./shtml');
			shtml.clearHead();
			shtml.req = req;
			shtml.setViewHolder(vals);
			dt = shtml.inline(dt);
			dt = shtml.block(dt);
			var ui = obj.parse(vals, dt)
			if (replacespecial === true) {
				if (resp.urlencode !== undefined) {

				}
			}
			ui = obj.insertContent(vals, ui, customui)
			ui = shtml.updatepageheader(ui);

			obj.output(resp, ui, path);
		}
		else {
			fs.readFile(path, function (err, data) {
				//prevent from breaking if file not found
				viewCache[nm]= {data:data, mtime:mtime};
				
				var vals = args;
				var dt = data.toString();
				var shtml = require('./shtml');
				shtml.clearHead();
				shtml.req = req;
				shtml.setViewHolder(vals);
				dt = shtml.inline(dt);
				dt = shtml.block(dt);
				var ui = obj.parse(vals, dt)
				if (replacespecial === true) {
					if (resp.urlencode !== undefined) {

					}
				}
				ui = obj.insertContent(vals, ui, customui)
				ui = shtml.updatepageheader(ui);
				obj.output(resp, ui, path);

			}
			);
		}

	}
	else {
		resp.end("404 : content not found");
	}
	
}



ajsloadable.prototype.parse = function (vals, dt) {
	var i = 0;
	var ui = dt.replace(/\{{(\w+)\}}/g, function (x) {
		i++;
		var key = x.slice(2, -2);
		if (vals[key]) {
			return vals[key];
		}
		else {
			return '';
		}

	});
	if (ui !== undefined) {
		if (i !== 0)
			ui = this.parse(vals, ui);
		return ui;
	}
	else
		return "";





	// return ui;

}

ajsloadable.prototype.insertContent = function (vals, content, customui) {

	var i = 0;
	var fs = require('fs');
	var obj = this;
	var pt = '';
	if (customui !== undefined)
		pt = customui;
	else
		pt = cfg.viewlayout;
	var path = cfg.viewpath + "/shared/" + pt + '.html';

	try {
		var data='';
		var re = new RegExp('[\/\.]', 'g');
        var mtime = fs.statSync(path).mtime;
		let nm = path.replace(re, '');
		if(this.checkFileLastMod(nm,mtime))
		{
          data= fs.readFileSync(path);
		  viewCache[nm]={data:data, mtime:mtime};
		}
		else
		 data = viewCache[nm].data;
		
		
		var dt = data.toString();
		
		var ui = obj.parse(vals, dt)
		ui = ui.replace(/\$generateContent\(\);/g, function (x) {
			i++;
			return content;

		});
		if (ui !== undefined) {
			var shtml = require('./shtml');
			ui = shtml.inline(ui);
			return ui;
		}
		else
			return "";

	}
	catch (err) {
		console.log(err)
	}


}



ajsloadable.prototype.output = function (resp, ui, fname, cache) {
	if (cache == true) {
		if ((this.cache !== undefined && !this.cache.cacheFile(fname, true)) || this.cache == undefined)
			this.cache.writemime('html', fname, 'text', true);
	}
	//else 

	this.zoutput(resp, ui, fname);
	//this.cache.writemime('html',ui,fname,'text',true);


}

ajsloadable.prototype.zoutput = function (resp, ui, fname) {
	var zlib = require('zlib');
	// if(resp.compress !==undefined && resp.compress.compress === true)
	// {
	//var raw = fs.createReadStream('index.html');
	if (this.acceptEncoding.match(/\bdeflate\b/)) {
		zlib.deflate(ui, function (err, buffer) {
			try {
				if (err) {
					console.log(err);
					resp.end({ "error": err });
				}
				resp.statusCode = 200;
				resp.setHeader('Content-Encoding', 'deflate');
				resp.setHeader('Content-Type', 'text/html');
				resp.end(buffer);

			}
			catch (err) {
				console.log(err);
			}


		});
	}
	else if (this.acceptEncoding.match(/\bgzip\b/)) {
		zlib.gzip(ui, function (err, buffer) {
			if (err) {
				console.log(err);
				resp.end({ "error": err });
			}
			else {
				resp.statusCode = 200;
				resp.setHeader('Content-encoding', 'gzip');
				resp.setHeader('Content-Type', 'text/html');

				resp.end(buffer);
			}

		});
	}
	else {
		resp.writeHead(200, { 'Content-Type': 'text/html' });
		resp.write(ui);
		resp.end("");
	}

}



ajsloadable.prototype.loadviewpart = function (view, resp, req) {
	//console.log(resp);
	var obj = this;
	var fs = require('fs');
	var path = req.viewpath(view);
	if (path !== '') {
		if ((this.cache !== undefined && !this.cache.cacheFile(path, true)) || this.cache === undefined) {
			var res = fs.readFileSync(path);


			//console.log(this.html); 
			obj.html += res.toString();
			var shtml = require('./shtml');
			shtml.req = req;
			obj.html = shtml.inline(obj.html);
		}


	}
	else {
		resp.writeHead(404, { 'Content-Type': 'text/html' });
		resp.end("404 : content not found");
	}



	//return res.toString();
}

ajsloadable.prototype.showLoadedViews = function (args, resp) {

	if (this.html !== '') {

		var ui = this.parse(args, this.html)
		//console.log(this.html);
		this.zoutput(resp, ui);
		this.html = "";
	}
	else {
		resp.end('');
	}
}



ajsloadable.prototype.model = function (model) {
	var simple = require('libray');
	var simplemod = new simple.simplemodel();
	var mod = require('../../../application/model/' + model);
	mod.__proto__ = simplemod;
	//console.log(mod);
	return mod;

}

ajsloadable.prototype.pongomodel = function (model) {

	//	var simple = require('simple');

	//  var simplepongomod = simple.pongomodel;
	try {
		var mos = require.resolve('../../../application/model/' + model);
	}
	catch (err) {
		console.log(err);
	}
	var mod = require('../../../application/model/' + model);

	var modnew = new mod();


	// mod.__proto__ = simplemod;
	//console.log(mod);
	return modnew;

}


ajsloadable.prototype.showintemplate = function (tempname, args, resp, cch) {

	if (cfg.templatable = true) {
		this.view(tempname, args, resp, 'templates', cch, true);
	}
}
