let application = require('./apphelper');
var library = require('./library');
var cache = require('./library').cache;
var util = require("util");
var url = require('url');
var path = require('path');
let simplecontroler = require('./library').simplecontroler;
let session = require('./library').session;
let urlencode = require('./library').urlencode;
let redir = require('./library').redirect;
let secure =  require('./library').secure;
let staticPath = [];
var config = require('../../config/systemconfig');
exports.controller = simplecontroler;
exports.urlencode = urlencode;
exports.session = session;
exports.redirect = redir;
exports.secure = secure;
exports.appGlobals={};
exports.static = function (relpath) {
	
	return (function (req,resp, path) {
	    staticPath[path.slice(1)]={relpath:relpath, path:path};
		
	});
  
}
exports.staticPath = staticPath;
exports.app = function appli() {
	let apphelp = new application();
	var app = function (req, res) {
		
		if (apphelp.usecache !== false)
			apphelp.cache = new cache(req, res);
		var method = req.method;
       
		apphelp.notstatic = false;
		var uril = req.url;
		var urlparts = url.parse(uril, true);
		var nn = util.inspect(urlparts.query);
		var tt = "";
		var ct = '';
         
		tt = urlparts.pathname.slice(1);
        
		if (tt.slice(-1) === '/') {
			tt = tt.slice(0, -1);
		}
		req.basepath = tt;
		var pthnm = tt.split('/');
		var ctrl = pthnm[0];
        let sdir=  path.normalize("/"+ctrl);
		var pth = ctrl;
		req.ctr = ctrl;
		if (req.ctr === '')
			req.ctr = config.defaultcontroler;
		var ctr;
		var reslv;
		apphelp.reqs = req;
		apphelp.resp = res;
       
		if (pthnm.length != 1 && pthnm[0] != 'favicon.ico') {
			try {
               
				reslv = require.resolve('../../application/controller/' + ctrl);
                 
				var ext = path.extname(reslv);
				var fn = path.basename(reslv.slice(0, -ext.length));

				ctr = require('../../application/controller/' + fn);
				var ctro = new ctr();
            
				if (reslv !== undefined) {
					ctro.method = method;
					apphelp.notstatic = true;
					apphelp.loadtoreq(req, res, ctro, tt);
					pthnm.shift();
					var rexp = new RegExp(/\.[a-zA-Z]+$/);
					//if (ctro[pthnm[0]] !== undefined) {
						var splitpath = urlparts.path.split('/');
						if (splitpath.length > 3 || !rexp.test(urlparts.path)) {
							apphelp.reqContent(pthnm, ctro, req, res, urlparts.query);
						}
						else {

							apphelp.notfound(res);
						}
					//}
				/*	else {
						if (ctro.catchall !== undefined) {

							ctro.req = req; ctro.res = res;

							ctro.catchall();
						}
						else
							apphelp.notfound(res);
			} */
				}
				else {


				}
			}
			catch (e) {

				if (reslv === undefined) {
					
					apphelp.loadtoreq(req, res, null, tt);
					apphelp.loadStatic(req.url, req, res,sdir);
				}
			}
		}
		else if (pthnm[0] !== '' && pthnm[0] !== 'favicon.ico') {
			try {
                
				reslv = require.resolve('../../application/controller/' + pthnm[0]);

			//	if (reslv !== undefined) {
					var ext = path.extname(reslv);
					var fn = path.basename(reslv.slice(0, -ext.length));

					ctr = require('../../application/controller/' + fn);

					//var smctr = new simplecontroler();

					//	ctr.__proto__ = smctr;

					var ctro = new ctr();
					if (ctro !== undefined) {
						apphelp.notstatic = true;
						apphelp.loadtoreq(req, res, ctro, tt);
						pthnm = [config.defaultpage];
						apphelp.reqContent(pthnm, ctro, req, res, urlparts.query);
					/*}
					else {
						if (ctro.catchall !== undefined) {
							ctro.req = req; ctro.res = res;

							ctro.catchall();
						}
						else
							apphelp.notfound(res);
			} */
				}
				else {
					res.writeHead(400, { 'content-type': 'text/plain' });
					res.end('{"message":"NOT FOUND","code":"400"}');
				}
			}
			catch (error) {

				apphelp.loadStatic(req.url, req, res,sdir);
			}
		}
		else if (pthnm[0] !== '' && pthnm[0] === 'favicon.ico') {


			apphelp.loadStatic(req.url, req, res,sdir);

		}
		else if (req.url == '/' || pthnm[0] === '') {
			try {
                
				reslv = require.resolve('../../application/controller/' + config.defaultcontroler);


				if (reslv !== undefined) {
					var ext = path.extname(reslv);
					var fn = path.basename(reslv.slice(0, -ext.length));

					ctr = require('../../application/controller/' + fn);



					let ctro = new ctr();

					//if (ctro !== undefined) {
						apphelp.notstatic = true;
						apphelp.loadtoreq(req, res, ctro, tt);
						pthnm = [config.defaultpage];
						ctro.method = method;
						apphelp.reqContent(pthnm, ctro, req, res, urlparts.query);



					//}
				}
				else {
					res.writeHead(400, { 'content-type': 'text/plain' });
					res.end('{"message":"NOT FOUND","code":"400"}');
				}
			}
			catch (error) {
				//console.log(error);
				res.writeHead(400, { 'content-type': 'text/plain' });
				res.end('{"message":"NOT FOUND","code":"400"}');
			}
		}
		else {

			res.writeHead(400, { 'content-type': 'text/plain' });
			res.end('{"message":"NOT FOUND","code":"400"}');
		}


	}
	//app.juice ='apple';
	app.use = function (path, callback) {
		if (arguments.length === 1) {
			callback = path;
			path = undefined;
		}
		apphelp.middleware.push({ function: callback, path: path });
		return app;
	}


	app.listen = function (port, srv) {
		if(!srv)
		  srv = '0.0.0.0';
		let serv = apphelp.create(app);
		serv.listen(port, srv);

	}
	app.listenSecure = function (port, options ,srv) {
		if(! srv)
		   srv = '0.0.0.0';
		
		let sserv = apphelp.createSecure(app, options);
		sserv.listen(port, srv);

	}
	app.fileCache = {};
	return app;

}



